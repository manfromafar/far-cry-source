#include "RenderPCH.h"
#include "nvparse.h"

#define yy_create_buffer ts10__create_buffer
#define yy_delete_buffer ts10__delete_buffer
#define yy_scan_buffer ts10__scan_buffer
#define yy_scan_string ts10__scan_string
#define yy_scan_bytes ts10__scan_bytes
#define yy_flex_debug ts10__flex_debug
#define yy_init_buffer ts10__init_buffer
#define yy_flush_buffer ts10__flush_buffer
#define yy_load_buffer_state ts10__load_buffer_state
#define yy_switch_to_buffer ts10__switch_to_buffer
#define yyin ts10_in
#define yyleng ts10_leng
#define yylex ts10_lex
#define yyout ts10_out
#define yyrestart ts10_restart
#define yytext ts10_text
#define yywrap ts10_wrap

#line 20 "_ts1_0_lexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 63
#define YY_END_OF_BUFFER 64
static yyconst short int yy_accept[438] =
    {   0,
        0,    0,   64,   63,   61,   60,   63,   63,    3,    4,
        5,   63,    7,   63,   63,   59,    6,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   61,   60,    0,
        0,    0,   59,   58,    1,    2,   57,   59,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,    0,
       57,   62,   62,   62,   62,   62,   62,   15,   62,   62,
       62,    0,   62,   62,   62,   62,   62,   62,   62,   62,
        9,   10,   11,   62,    0,   62,   62,   62,   62,   62,
       62,   62,   62,   62,    0,   62,   62,   62,   62,   62,
       12,   62,   62,   62,    8,   62,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   24,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   16,   17,   19,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   31,   32,   62,   62,
       62,   62,   22,   62,   62,   62,   62,   21,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   13,   14,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   23,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   26,   20,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   18,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   33,   34,   39,
       40,   41,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   28,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   25,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   42,   43,   44,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   35,   36,   62,   27,   62,
       62,   62,   62,   62,   30,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   37,   38,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   29,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       48,   49,   50,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   45,   46,   47,   62,   62,   62,   62,

       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   54,   55,   56,   62,   62,   62,
       62,   62,   62,   51,   52,   53,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    1,    1,    1,    7,
        8,    9,   10,   11,   10,   12,   13,   14,   15,   16,
       17,   18,   18,   18,   18,   18,   18,    1,   19,    1,
        1,    1,    1,    1,   20,   21,   21,   21,   22,   21,
       23,   24,   21,   21,   21,   25,   21,   26,   27,   21,
       28,   29,   30,   31,   32,   21,   21,   21,   21,   33,
        1,    1,    1,    1,   34,    1,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   44,   21,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   21,   56,
       57,   21,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[58] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    2,    2,    2,    2,    2,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2
    } ;

static yyconst short int yy_base[439] =
    {   0,
        0,    0,  915,  916,  912,  916,   55,  908,  916,  916,
      916,   48,  916,   53,   63,   63,  916,  900,   61,   62,
       49,   70,   73,   74,   75,   76,   77,  909,  916,   87,
      879,   78,   90,   83,  916,  916,  109,  116,  897,  107,
      108,   98,  100,  101,  102,  109,  105,  124,  125,  878,
      145,  132,  127,  128,  129,  135,  130,  895,  134,  136,
      163,  891,  154,  138,  155,  140,  141,  144,  143,  158,
      893,  892,  891,  159,  890,  168,  171,  172,  173,  182,
      183,  184,  185,  188,  887,  186,  191,  189,  187,  193,
      888,  194,  192,  196,  916,  198,  197,  195,  202,  206,

      207,  210,  212,  215,  219,  213,  220,  224,  231,  235,
      236,  239,  247,  238,  240,  243,  245,  248,  254,  253,
      255,  241,  256,  258,  259,  264,  265,  269,  270,  268,
      271,  278,  281,  279,  287,  288,  887,  886,  885,  296,
      293,  297,  298,  299,  301,  302,  303,  304,  305,  310,
      309,  314,  312,  313,  327,  315,  884,  883,  338,  322,
      323,  316,  882,  324,  331,  335,  337,  881,  336,  347,
      349,  355,  357,  359,  358,  360,  361,  365,  880,  879,
      366,  368,  369,  367,  378,  370,  371,  372,  375,  379,
      383,  407,  374,  376,  380,  381,  878,  385,  396,  394,

      409,  413,  415,  416,  418,  419,  422,  420,  424,  426,
      429,  435,  877,  432,  430,  433,  434,  436,  437,  438,
      441,  425,  443,  445,  439,  876,  466,  469,  471,  475,
      477,  474,  446,  478,  440,  483,  484,  875,  874,  873,
      872,  871,  486,  488,  491,  489,  490,  492,  494,  496,
      493,  498,  495,  499,  501,  500,  531,  504,  505,  502,
      503,  506,  512,  510,  513,  514,  528,  529,  538,  508,
      540,  545,  870,  548,  551,  553,  556,  555,  557,  558,
      559,  560,  561,  562,  564,  566,  570,  572,  573,  574,
      575,  577,  578,  869,  868,  867,  584,  587,  585,  591,

      588,  590,  598,  600,  608,  866,  865,  603,  863,  605,
      606,  604,  613,  614,  615,  619,  616,  618,  620,  621,
      628,  625,  635,  633,  638,  641,  862,  861,  636,  624,
      630,  643,  645,  647,  648,  654,  650,  656,  659,  657,
      662,  664,  860,  665,  667,  670,  671,  673,  668,  675,
      677,  679,  683,  685,  688,  687,  693,  691,  694,  720,
      696,  697,  699,  701,  706,  708,  711,  698,  716,  718,
      745,  714,  727,  738,  747,  719,  728,  731,  740,  751,
      859,  858,  855,  753,  754,  756,  757,  758,  760,  761,
      763,  759,  769,  854,  853,  852,  762,  770,  771,  772,

      773,  774,  775,  778,  777,  779,  780,  783,  813,  786,
      787,  788,  789,  797,  794,  805,  806,  827,  790,  809,
      835,  807,  808,  815,  849,  848,  847,  828,  829,  836,
      837,  841,  845,  839,  838,  448,  916,  437
    } ;

static yyconst short int yy_def[439] =
    {   0,
      437,    1,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  438,  437,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  437,
      437,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  437,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  437,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  437,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  437,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,

      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,  438,  438,  438,  438,
      438,  438,  438,  438,  438,  438,    0,  437
    } ;

static yyconst short int yy_nxt[974] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    4,   12,
       13,   14,   15,   16,   16,   16,   16,   16,   17,   18,
       18,   18,   19,   18,   20,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   21,   22,   23,   18,
       18,   18,   18,   18,   18,   18,   24,   25,   26,   18,
       18,   18,   27,   18,   18,   18,   18,   29,   30,   32,
      437,   33,   33,   33,   33,   33,   34,   34,   34,   34,
       34,   35,  437,  437,   37,   36,   38,   38,   38,   38,
       38,  437,   40,   41,  437,  437,  437,  437,  437,   29,
       30,   34,   34,   34,   34,   34,   34,   34,   34,   34,

       34,   37,   42,   33,   33,   33,   33,   33,   43,  437,
       48,  437,  437,  437,   47,   49,  437,   44,  437,  437,
      437,   46,   51,   51,   51,   51,   51,   37,   45,   38,
       38,   38,   38,   38,   52,  437,  437,   53,  437,  437,
      437,  437,   54,  437,   59,  437,  437,  437,   55,  437,
       57,  437,  437,   56,  437,  437,   64,   58,   51,   51,
       51,   51,   51,   63,   68,  437,  437,   66,   67,  437,
      437,   77,   65,   76,  437,   60,   71,   72,   73,  437,
       61,   82,  437,  437,  437,   69,   79,   70,   78,   80,
       81,   83,   86,  437,  437,  437,  437,  437,  437,  437,

      437,   87,  437,  437,  437,  437,  437,  437,  437,  437,
       89,   88,   84,  437,   97,   74,  105,  437,  437,   96,
       91,  437,  109,  437,  437,   99,  437,  101,  104,  106,
      437,  437,   90,  102,  103,  437,   92,   93,   94,   98,
      100,  114,  437,  108,  115,  113,  437,  437,  107,  437,
      437,  437,  437,  116,  437,  110,  437,  111,  437,  437,
      112,  123,  124,  125,  437,  437,  437,  437,  119,  437,
      437,  128,  117,  129,  121,  437,  437,  118,  131,  437,
      437,  437,  437,  126,  132,  120,  122,  133,  130,  437,
      437,  135,  437,  137,  136,  138,  139,  127,  437,  437,

      134,  142,  143,  141,  437,  145,  144,  437,  437,  437,
      437,  146,  437,  437,  437,  437,  437,  140,  154,  155,
      437,  437,  149,  437,  437,  437,  437,  437,  151,  153,
      147,  152,  148,  437,  437,  437,  159,  158,  437,  150,
      160,  166,  437,  161,  162,  156,  437,  437,  437,  437,
      163,  157,  164,  169,  170,  167,  174,  177,  437,  175,
      437,  179,  176,  180,  165,  178,  437,  168,  437,  437,
      437,  437,  437,  181,  171,  172,  437,  437,  437,  437,
      437,  437,  437,  437,  182,  437,  437,  437,  173,  437,
      437,  437,  437,  184,  437,  185,  437,  202,  203,  191,

      188,  192,  183,  186,  193,  437,  189,  437,  197,  200,
      187,  190,  207,  198,  195,  194,  199,  196,  437,  201,
      437,  204,  205,  206,  437,  210,  437,  437,  208,  437,
      437,  437,  209,  437,  212,  437,  437,  437,   39,  211,
      437,  437,  213,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  214,  437,  220,  437,  437,  222,  437,
      215,  221,  216,  217,  223,  218,  219,  224,  225,  227,
      226,  234,  228,  229,  233,  230,  231,  437,  236,  235,
      437,  238,  437,  232,  239,  437,  437,  240,  437,  437,
      237,  241,  246,  242,  437,  437,  244,  437,  247,  437,

      437,  437,  437,  437,  437,  437,  437,  437,  243,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  245,  437,
      249,  437,  253,  437,  437,  437,  251,  254,  256,  257,
      255,  260,  261,  248,  250,  252,  259,  262,  269,  437,
      437,  258,  437,  281,  263,  264,  265,  266,  268,  437,
      273,  437,  279,  280,  271,  270,  437,  274,  272,  437,
      275,  276,  437,  278,  437,  267,  437,  437,  437,  437,
      437,  437,  437,  437,  277,  437,  282,  437,  294,  283,
      295,  437,  296,  437,  437,  437,  437,  284,  437,  437,
      285,  288,  286,  287,  292,  437,  437,  291,  437,  437,

      306,  437,  437,  297,  289,  290,  307,  293,  301,  437,
      298,  437,  299,  300,  437,  437,  437,  437,  303,  437,
      305,  302,  312,  313,  437,  437,  437,  437,  309,  437,
      437,  437,  437,  308,  304,  437,  437,  314,  311,  437,
      327,  437,  310,  315,  437,  316,  437,  437,  320,  437,
      328,  317,  437,  324,  437,  322,  437,  323,  437,  437,
      318,  437,  319,  321,  335,  437,  326,  437,  437,  329,
      437,  330,  325,  437,  331,  437,  437,  332,  437,  437,
      334,  437,  437,  333,  437,  338,  437,  340,  437,  342,
      437,  337,  339,  344,  437,  336,  437,  343,  437,  437,

      348,  341,  437,  346,  437,  437,  350,  437,  437,  437,
      437,  351,  437,  353,  345,  352,  356,  437,  347,  437,
      349,  358,  437,  357,  355,  437,  360,  437,  362,  437,
      437,  437,  359,  354,  363,  364,  365,  373,  437,  437,
      361,  371,  437,  381,  372,  367,  368,  366,  369,  437,
      379,  437,  380,  370,  382,  374,  437,  375,  437,  376,
      377,  378,  437,  383,  437,  437,  384,  437,  437,  437,
      437,  437,  437,  437,  437,  385,  394,  395,  386,  396,
      437,  437,  437,  437,  437,  437,  437,  387,  437,  437,
      437,  437,  389,  390,  437,  391,  393,  437,  437,  437,

      437,  437,  398,  392,  401,  437,  425,  388,  437,  400,
      397,  403,  408,  409,  399,  407,  437,  437,  437,  437,
      437,  404,  402,  406,  437,  426,  437,  411,  412,  413,
      418,  405,  410,  419,  415,  416,  417,  414,  437,  437,
      437,  422,  423,  424,  420,  421,  437,  437,  437,  437,
      437,  427,  437,  434,  428,  429,  437,  435,  437,  437,
      437,  436,  430,  437,  437,  437,  437,  431,  432,  437,
      437,  437,  437,  437,  437,  433,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,

       95,   85,  437,  437,  437,   75,  437,   62,  437,   50,
       28,  437,   31,   28,  437,    3,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437
    } ;

static yyconst short int yy_chk[974] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    7,    7,   12,
       21,   12,   12,   12,   12,   12,   14,   14,   14,   14,
       14,   15,   19,   20,   16,   15,   16,   16,   16,   16,
       16,   22,   19,   20,   23,   24,   25,   26,   27,   30,
       30,   32,   32,   32,   32,   32,   34,   34,   34,   34,

       34,   33,   21,   33,   33,   33,   33,   33,   22,   42,
       26,   43,   44,   45,   25,   27,   47,   22,   40,   41,
       46,   24,   37,   37,   37,   37,   37,   38,   23,   38,
       38,   38,   38,   38,   40,   48,   49,   41,   53,   54,
       55,   57,   42,   52,   47,   59,   56,   60,   43,   64,
       45,   66,   67,   44,   69,   68,   53,   46,   51,   51,
       51,   51,   51,   52,   57,   63,   65,   55,   56,   70,
       74,   64,   54,   63,   61,   48,   61,   61,   61,   76,
       49,   69,   77,   78,   79,   59,   66,   60,   65,   67,
       68,   70,   76,   80,   81,   82,   83,   86,   89,   84,

       88,   77,   87,   93,   90,   92,   98,   94,   97,   96,
       79,   78,   74,   99,   87,   61,   97,  100,  101,   86,
       81,  102,  101,  103,  106,   89,  104,   92,   96,   98,
      105,  107,   80,   93,   94,  108,   82,   83,   84,   88,
       90,  104,  109,  100,  105,  103,  110,  111,   99,  114,
      112,  115,  122,  106,  116,  101,  117,  101,  113,  118,
      102,  113,  113,  113,  120,  119,  121,  123,  109,  124,
      125,  114,  107,  115,  111,  126,  127,  108,  117,  130,
      128,  129,  131,  113,  118,  110,  112,  119,  116,  132,
      134,  121,  133,  123,  122,  124,  125,  113,  135,  136,

      120,  128,  129,  127,  141,  131,  130,  140,  142,  143,
      144,  131,  145,  146,  147,  148,  149,  126,  142,  143,
      151,  150,  134,  153,  154,  152,  156,  162,  136,  141,
      132,  140,  133,  160,  161,  164,  147,  146,  155,  135,
      148,  154,  165,  149,  150,  144,  166,  169,  167,  159,
      151,  145,  152,  159,  159,  155,  160,  164,  170,  161,
      171,  166,  162,  167,  153,  165,  172,  156,  173,  175,
      174,  176,  177,  169,  159,  159,  178,  181,  184,  182,
      183,  186,  187,  188,  170,  193,  189,  194,  159,  185,
      190,  195,  196,  172,  191,  173,  198,  191,  191,  181,

      176,  182,  171,  174,  183,  200,  177,  199,  186,  189,
      175,  178,  193,  187,  185,  184,  188,  185,  192,  190,
      201,  192,  192,  192,  202,  196,  203,  204,  194,  205,
      206,  208,  195,  207,  199,  209,  222,  210,  438,  198,
      211,  215,  200,  214,  216,  217,  212,  218,  219,  220,
      225,  235,  221,  201,  223,  207,  224,  233,  209,  436,
      202,  208,  203,  204,  210,  205,  206,  211,  212,  215,
      214,  222,  216,  217,  221,  218,  219,  227,  224,  223,
      228,  227,  229,  220,  228,  232,  230,  229,  231,  234,
      225,  230,  235,  231,  236,  237,  233,  243,  236,  244,

      246,  247,  245,  248,  251,  249,  253,  250,  232,  252,
      254,  256,  255,  260,  261,  258,  259,  262,  234,  270,
      237,  264,  246,  263,  265,  266,  244,  247,  249,  250,
      248,  253,  254,  236,  243,  245,  252,  255,  259,  267,
      268,  251,  257,  270,  256,  257,  257,  257,  258,  269,
      263,  271,  269,  269,  261,  260,  272,  264,  262,  274,
      265,  266,  275,  268,  276,  257,  278,  277,  279,  280,
      281,  282,  283,  284,  267,  285,  271,  286,  284,  272,
      285,  287,  286,  288,  289,  290,  291,  274,  292,  293,
      275,  278,  276,  277,  282,  297,  299,  281,  298,  301,

      299,  302,  300,  287,  279,  280,  300,  283,  291,  303,
      288,  304,  289,  290,  308,  312,  310,  311,  293,  305,
      298,  292,  305,  305,  313,  314,  315,  317,  302,  318,
      316,  319,  320,  301,  297,  330,  322,  308,  304,  321,
      322,  331,  303,  310,  324,  311,  323,  329,  315,  325,
      323,  312,  326,  319,  332,  317,  333,  318,  334,  335,
      313,  337,  314,  316,  331,  336,  321,  338,  340,  324,
      339,  324,  320,  341,  325,  342,  344,  326,  345,  349,
      330,  346,  347,  329,  348,  334,  350,  336,  351,  338,
      352,  333,  335,  340,  353,  332,  354,  339,  356,  355,

      345,  337,  358,  342,  357,  359,  347,  361,  362,  368,
      363,  348,  364,  350,  341,  349,  353,  365,  344,  366,
      346,  355,  367,  354,  352,  372,  357,  369,  359,  370,
      376,  360,  356,  351,  360,  360,  360,  368,  373,  377,
      358,  366,  378,  373,  367,  362,  363,  361,  364,  374,
      372,  379,  372,  365,  374,  369,  371,  370,  375,  371,
      371,  371,  380,  375,  384,  385,  376,  386,  387,  388,
      392,  389,  390,  397,  391,  377,  389,  390,  378,  391,
      393,  398,  399,  400,  401,  402,  403,  379,  405,  404,
      406,  407,  384,  385,  408,  386,  388,  410,  411,  412,

      413,  419,  393,  387,  399,  415,  419,  380,  414,  398,
      392,  401,  406,  407,  397,  405,  416,  417,  422,  423,
      420,  402,  400,  404,  409,  420,  424,  409,  409,  409,
      414,  403,  408,  415,  411,  412,  413,  410,  418,  428,
      429,  418,  418,  418,  416,  417,  421,  430,  431,  435,
      434,  421,  432,  431,  422,  423,  433,  432,  427,  426,
      425,  433,  424,  396,  395,  394,  383,  428,  429,  382,
      381,  343,  328,  327,  309,  430,  307,  306,  296,  295,
      294,  273,  242,  241,  240,  239,  238,  226,  213,  197,
      180,  179,  168,  163,  158,  157,  139,  138,  137,   91,

       85,   75,   73,   72,   71,   62,   58,   50,   39,   31,
       28,   18,    8,    5,    3,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437,  437,  437,  437,  437,  437,  437,  437,
      437,  437,  437
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "ts1.0_tokens.l"
#define INITIAL 0
/* definitions */
#line 6 "ts1.0_tokens.l"
#include <stdlib.h>
//#include <malloc.h>
#include "ts1.0_inst.h"
#include "ts1.0_inst_list.h"
#include "_ts1.0_parser.h"
#ifdef _WIN32
# include <windows.h>
#endif
#include <GL/gl.h>
#include "nvparse_errors.h"
#include "nvparse_externs.h"


#define YY_INPUT(buf,result,max_size) \
{ \
	int c = *myin++; \
	result = (c == 0) ? YY_NULL : (buf[0] = c, 1); \
}

#define YY_ALWAYS_INTERACTIVE 1

/* end of definitions */
#line 762 "_ts1_0_lexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 29 "ts1.0_tokens.l"


#line 912 "_ts1_0_lexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 438 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 916 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "ts1.0_tokens.l"
{
			    A:
				switch (yyinput()) {
				  case '*': goto B;
				  case 0: errors.set("end-of-file in comment", line_number); break;
				  case '\n': line_number++;
				  default:  goto A;
				}
			    B:
				switch (yyinput()) {
				  case '*': goto B;
				  case '/': break;
				  case 0: errors.set("end-of-file in comment", line_number); break;
				  case '\n': line_number++;
				  default:  goto A;
				}
			}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 49 "ts1.0_tokens.l"
{
			    char ch;
			    while ((ch = yyinput()) != '\n');
			    if (ch == '\n') line_number++;
			}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 55 "ts1.0_tokens.l"
{
			    char ch;
			    while ((ch = yyinput()) != '\n');
			    if (ch == '\n') line_number++;
			}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 61 "ts1.0_tokens.l"
return(openParen);
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 62 "ts1.0_tokens.l"
return(closeParen);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "ts1.0_tokens.l"
return(semicolon);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "ts1.0_tokens.l"
return(comma);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "ts1.0_tokens.l"
{ /* eat header */ }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "ts1.0_tokens.l"
{
			    ts10_lval.fval = (float)0;
			    return(texVariable);
			}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 73 "ts1.0_tokens.l"
{
			    ts10_lval.fval = (float)1;
			    return(texVariable);
			}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 78 "ts1.0_tokens.l"
{
			    ts10_lval.fval = (float)2;
			    return(texVariable);
			}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 83 "ts1.0_tokens.l"
return(expandString);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 85 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)GL_GEQUAL;
				return (gequal);
			}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 90 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)GL_LESS;
				return(less);
			}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 95 "ts1.0_tokens.l"
return(nop);
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 96 "ts1.0_tokens.l"
return(texture_1d);
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 97 "ts1.0_tokens.l"
return(texture_2d);
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 98 "ts1.0_tokens.l"
return(texture_rectangle);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 99 "ts1.0_tokens.l"
return(texture_3d);
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 100 "ts1.0_tokens.l"
return(texture_cube_map);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 101 "ts1.0_tokens.l"
return(cull_fragment);
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 102 "ts1.0_tokens.l"
return(pass_through);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 103 "ts1.0_tokens.l"
return(offset_2d_scale);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 104 "ts1.0_tokens.l"
return(offset_2d);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 105 "ts1.0_tokens.l"
return(offset_rectangle_scale);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 106 "ts1.0_tokens.l"
return(offset_rectangle);
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 107 "ts1.0_tokens.l"
return(offset_projective_2d_scale);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 108 "ts1.0_tokens.l"
return(offset_projective_2d);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 109 "ts1.0_tokens.l"
return(offset_projective_rectangle_scale);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 110 "ts1.0_tokens.l"
return(offset_projective_rectangle);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 111 "ts1.0_tokens.l"
return(dependent_ar);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 112 "ts1.0_tokens.l"
return(dependent_gb);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 114 "ts1.0_tokens.l"
return(dot_product_2d_1of2);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 115 "ts1.0_tokens.l"
return(dot_product_2d_2of2);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 117 "ts1.0_tokens.l"
return(dot_product_rectangle_1of2);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 118 "ts1.0_tokens.l"
return(dot_product_rectangle_2of2);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 120 "ts1.0_tokens.l"
return(dot_product_depth_replace_1of2);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 121 "ts1.0_tokens.l"
return(dot_product_depth_replace_2of2);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 123 "ts1.0_tokens.l"
return(dot_product_3d_1of3);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 124 "ts1.0_tokens.l"
return(dot_product_3d_2of3);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 125 "ts1.0_tokens.l"
return(dot_product_3d_3of3);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 127 "ts1.0_tokens.l"
return(dot_product_cube_map_1of3);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 128 "ts1.0_tokens.l"
return(dot_product_cube_map_2of3);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 129 "ts1.0_tokens.l"
return(dot_product_cube_map_3of3);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 131 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_eye_from_qs_1of3);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 132 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_eye_from_qs_2of3);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 133 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_eye_from_qs_3of3);
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 135 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_const_eye_1of3);
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 136 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_const_eye_2of3);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 137 "ts1.0_tokens.l"
return(dot_product_reflect_cube_map_const_eye_3of3);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 139 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_eye_from_qs_1of3);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 140 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_eye_from_qs_2of3);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 141 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_eye_from_qs_3of3);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 143 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_const_eye_1of3);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 144 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_const_eye_2of3);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 145 "ts1.0_tokens.l"
return(dot_product_cube_map_and_reflect_cube_map_const_eye_3of3);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 147 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)atof(yytext);
				return(floatValue);
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 152 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)atof(yytext);
				return(floatValue);
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 157 "ts1.0_tokens.l"
{
				ts10_lval.fval = (float)atof(yytext);
				return(floatValue);
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 162 "ts1.0_tokens.l"
{
				line_number++;
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 166 "ts1.0_tokens.l"
{}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 168 "ts1.0_tokens.l"
{
				errors.set("unrecognized token", line_number);
			}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 173 "ts1.0_tokens.l"
ECHO;
	YY_BREAK
#line 1362 "_ts1_0_lexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 438 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 438 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 437);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
		LEX_DBG_BREAK
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 173 "ts1.0_tokens.l"


bool ts10_init_more();

bool ts10_init(char* inputString)
{
    myin = inputString;
	return ts10_init_more();
}


#ifndef ts10_wrap
int ts10_wrap(void)
{
  return(1);
}
#endif
